#!/bin/bash

# REFERENCES:
# https://stackoverflow.com/questions/13316437/insert-lines-in-a-file-starting-from-a-specific-line

# Get the project root folder.
# return (string): The name of the project root folder.
get_project_folder() {

    # Path array of the current working directory of this script file.
    local path_array=($(echo "$THIS_SCRIPT_FILE_WITH_PATH" | tr '/' '\n'))

    # Removes the last item of the array (this filename with extension).
    unset path_array[-1]

    # Removes the last item of the array (the directory 'sh').
    unset path_array[-1]

    # Removes the last item of the array (the directory 'src').
    unset path_array[-1]

    # Joins the array back.
    # local project_folder=$(path_array_join "/" "${path_array[@]}")

    local project_folder=${path_array[-1]}

    # Returns the project folder name.
    echo "$project_folder"

}

# BETTER NOT TO USE THIS FUNCTION AND KEEP THE AUTOMATIC TEXT GENERATED
# =====================================================================
# Inserts the PHPDoc class documentation in the file passed as argument.
# param1 (string): The path to the file where the string will be inserted.
# param2 (string): The namespace together with the class name of the opened file.
# return (string): The class documentation inserted.
# example:
# insert_phpdoc_class_documentation "$test_full_path" "$file_namespace_and_class_name"
insert_phpdoc_class_documentation() {

    local match="Generated by PHPUnit_SkeletonGenerator on .*$"
    local file="$1"

    local file_namespace_and_class_name="$2"
    local namespace_array=($(echo "$file_namespace_and_class_name" | tr '\' '\n'))

    local phpdoc_class_documentation="@covers  ${namespace_array[0]}\\\\${namespace_array[1]}\\\\${namespace_array[2]}\n"
    local root_namespace_with_dashes=${namespace_array[0]//_/-}
    phpdoc_class_documentation="${phpdoc_class_documentation} * @uses    <a href=\"${namespace_array[1]}\/${root_namespace_with_dashes}-${namespace_array[1]}-${namespace_array[2]}.html\">${namespace_array[0]}\\\\${namespace_array[1]}\\\\${namespace_array[2]}<\/a> to test its functionality."

    # s/AAAA/BBBB/options
    sed -i "s/$match/$phpdoc_class_documentation/" $file

    echo "${phpdoc_class_documentation}"
}

# Inserts the PHPDoc file header in the file passed as argument.
# param1 (string): The path to the file where the string will be inserted.
# return (string): The file documentation inserted.
insert_phpdoc_file_documentation() {

    local current_year=$(date +'%Y')
    local date=$(date '+%Y-%m-%d')

    local phpdoc_file_documentation="\/**\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} * An example test class to show syntax and documentation.\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} *\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} * This test class is only an example to serve as a reference or be deleted.<br \/>\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} * Last modified in ${date}<br \/>\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} * PHP version 7.4.23<br \/>\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} *\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} * @copyright   ${current_year} Leonardo Pinheiro\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} * @author      __Leonardo Pinheiro__ <info@leonardopinheiro.net>\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} * @link        https:\/\/www.leonardopinheiro.net Leonardo Pinheiro Designer's website\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} *\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} * @see         https:\/\/stackoverflow.com\/questions\/45506414\/how-to-document-phpunit-tests How to document PHPUnit tests\n"
    phpdoc_file_documentation="${phpdoc_file_documentation} *\/\n"

    local match="<?php"
    local file="$1"

    # s/AAAA/BBBB/options
    sed -i "s/$match/$match\n\n$phpdoc_file_documentation/" $file

    echo "$phpdoc_file_documentation"
}

# Inserts the require_once statement.
# param1 (string): The test full file path.
# return (string): The require_once statement.
insert_require_once() {

    local test_full_path="$1"

    # Breaks the path into an array.
    local path_array=($(echo "$test_full_path" | tr '/' '\n'))

    # Removes the last item of the array (test name with extension).
    unset path_array[-1]

    # Levels up substring.
    local one_level_up="\/.."
    local levels_up=""

    # The counter of levels.
    local level_counter=0

    # Loops through array backwards.
    for (( idx=${#path_array[@]}-1 ; idx>=0 ; idx-- )) ; do

        (( level_counter++ ))

        if [[ "${path_array[idx]}" = "tests" ]]; then
            break
        fi
    done

    # Builds the substring with the levels to go up.
    for (( index=0 ; index<=${level_counter}-1 ; index++ )) ; do
        levels_up="${levels_up}${one_level_up}"
    done

    local require_once_statement="require_once(__DIR__ . '${levels_up}\/src\/shared\/autoload.php');"

    local match="$(grep -w '^namespace' "$test_full_path")"
    match=${match//\\/\\\\}
    local file="$test_full_path"

    # s/AAAA/BBBB/options
    sed -i "s/$match/$match\n\n$require_once_statement/" $file

    echo "$require_once_statement"
}

# Joins array into string.
# param1 (string): The separator for the joining of the array elements.
# param2 (array): The array to be joined.
# return (string): The path.
path_array_join() {

    local separator="$1"
    local array=("$@")
    local path_array

    # Loops through array skipping the first, avoiding /// at the beggining.
    for i in "${array[@]:1}"; do
        path_array="${path_array}${separator}${i}"
    done

    # Return
    echo $path_array
}